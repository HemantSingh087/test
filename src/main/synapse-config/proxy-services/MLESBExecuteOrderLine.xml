<?xml version="1.0" encoding="UTF-8"?>
<proxy name="MLESBExecute" startOnLoad="true" trace="enable" transports="http https" xmlns="http://ws.apache.org/ns/synapse">
    <target>
        <inSequence>
            <property expression="//onyx:SessionID" name="onyxSessionId" scope="default" type="STRING" xmlns:onyx="http://www.onyx.com/OEAS/WebService"/>
            <property expression="//onyx:LogicalObjectName" name="logicalObjectName" scope="default" type="STRING" xmlns:onyx="http://www.onyx.com/OEAS/WebService"/>
            <property expression="//onyx:LogicalMethodName" name="logicalMethodName" scope="default" type="STRING" xmlns:onyx="http://www.onyx.com/OEAS/WebService"/>
            <!-- Local entries for calls -->
            <property expression="get-property('OnyxURL')" name="uri.var.OnyxUri" scope="default" type="STRING"/>
            <property expression="get-property('OrderUpsertCall')" name="uri.var.OrderUpsert" scope="default" type="STRING"/>
            <property expression="get-property('OrderHeaderUpsertCall')" name="uri.var.OrderHeaderUpsert" scope="default" type="STRING"/>
            <property expression="get-property('OrderLineUpsertCall')" name="uri.var.OrderLineUpsert" scope="default" type="STRING"/>
            <property name="feature" scope="default" type="STRING" value="MHE_App"/>
            <property name="sequenceName" scope="default" type="STRING" value="MLESBExecute"/>
            <property name="progress" scope="default" type="STRING" value="Start"/>
            <log>
                <property expression="$ctx:feature" name="Feature"/>
                <property expression="$ctx:sequenceName" name="SequenceName"/>
                <property expression="$ctx:progress" name="Progress"/>
                <property expression="$ctx:logicalObjectName" name="object"/>
                <property expression="$ctx:logicalMethodName" name="method"/>
            </log>
            <enrich>
                <source clone="true" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xpath="$body/soapenv:Envelope/soapenv:Body/child::*"/>
                <target property="ORIGINAL_BODY" type="property"/>
            </enrich>
            <enrich>
                <source clone="true" property="ORIGINAL_BODY" type="property"/>
                <target type="body"/>
            </enrich>
            <property expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" name="MessageIDTest" scope="default" type="STRING"/>
            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
            <property name="ContentType" scope="axis2" type="STRING" value="application/xml"/>
            <property expression="$body" name="test" scope="default" type="OM"/>
            <property expression="$body" name="test2" scope="default" type="OM"/>
            <enrich>
                <source clone="true" type="inline">
                    <body/>
                </source>
                <target property="test" type="property"/>
            </enrich>
            <!-- Local entries for calls -->
            <switch source="$ctx:logicalObjectName" xmlns:onyx="http://www.onyx.com/OEAS/WebService">
                <case regex="literatureOrder">
                    <filter regex="saveCollection" source="$ctx:logicalMethodName">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <test>$1</test>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="//*[local-name() = 'ParamXML']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                </args>
                            </payloadFactory>
                            <payloadFactory media-type="xml">
                                <format>
                                    <test>$1</test>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="//*[local-name() = 'literatureOrders']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                </args>
                            </payloadFactory>
                            <!--iterate expression="//*[local-name() = 'literatureOrder']">
                        <target>
                           <sequence><-->
                            <payloadFactory media-type="xml">
                                <format>
                                    <test>$1</test>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="//*[local-name() = 'literatureOrder']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                </args>
                            </payloadFactory>
                            <property expression="//*[local-name() = 'orderDate']" name="orderDate" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
                            <script language="js"><![CDATA[var payload = mc.getProperty('orderDate').trim();
                                            var newPayload = payload.replace(' ','T');
                                            mc.setProperty('orderDate',newPayload);]]></script>
                            <property expression="//*[local-name() = 'legacySecondaryId']" name="secondaryId" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
                            <payloadFactory media-type="xml">
                                <format>
                                    <body>
                                        <xs:var_mloh_external_system_reference xmlns:xs="OrderHeaderUpsert">Salesforce</xs:var_mloh_external_system_reference>
                                        <xs:var_mloh_external_system_name xmlns:xs="OrderHeaderUpsert">Salesforce</xs:var_mloh_external_system_name>
                                        <xs:var_mloh_sf_order_id xmlns:xs="OrderHeaderUpsert">$10</xs:var_mloh_sf_order_id>
                                        <xs:var_mloh_sfdepartmentid xmlns:xs="OrderHeaderUpsert">$12</xs:var_mloh_sfdepartmentid>
                                        <xs:var_mloh_sf_contact_id xmlns:xs="OrderHeaderUpsert">$11</xs:var_mloh_sf_contact_id>
                                        <xs:var_mloh_address_1 xmlns:xs="OrderHeaderUpsert">$1</xs:var_mloh_address_1>
                                        <xs:var_mloh_address_2 xmlns:xs="OrderHeaderUpsert">$2</xs:var_mloh_address_2>
                                        <xs:var_mloh_address_3 xmlns:xs="OrderHeaderUpsert">$3</xs:var_mloh_address_3>
                                        <xs:var_mloh_address_4 xmlns:xs="OrderHeaderUpsert">$4</xs:var_mloh_address_4>
                                        <xs:var_mloh_address_5 xmlns:xs="OrderHeaderUpsert">$5</xs:var_mloh_address_5>
                                        <xs:var_mloh_email xmlns:xs="OrderHeaderUpsert">$6</xs:var_mloh_email>
                                        <xs:var_mloh_ship_method xmlns:xs="OrderHeaderUpsert">$7</xs:var_mloh_ship_method>
                                        <xs:var_mloh_order_start_date xmlns:xs="OrderHeaderUpsert">$8</xs:var_mloh_order_start_date>
                                        <xs:var_mloh_sample_source xmlns:xs="OrderHeaderUpsert">$9</xs:var_mloh_sample_source>
                                        <xs:var_mloh_comment_1_onyx xmlns:xs="OrderHeaderUpsert">$10</xs:var_mloh_comment_1_onyx>
                                        <xs:var_mloh_contact_sec_id_onyx xmlns:xs="OrderHeaderUpsert">$13</xs:var_mloh_contact_sec_id_onyx>
                                        <xs:var_mloh_order_header_secid_onyx xmlns:xs="OrderHeaderUpsert">$14</xs:var_mloh_order_header_secid_onyx>
                                        <xs:var_mloh_department_secid_onyx xmlns:xs="OrderHeaderUpsert">$15</xs:var_mloh_department_secid_onyx>
                                        <xs:var_mloh_department_cacct xmlns:xs="OrderHeaderUpsert">$16</xs:var_mloh_department_cacct>
                                        <xs:var_mloh_sales_rep_name xmlns:xs="OrderHeaderUpsert">$17</xs:var_mloh_sales_rep_name>
                                        <xs:var_mloh_sales_rep_phone xmlns:xs="OrderHeaderUpsert">$18</xs:var_mloh_sales_rep_phone>
                                        <xs:var_mloh_sales_rep_email xmlns:xs="OrderHeaderUpsert">$19</xs:var_mloh_sales_rep_email>
                                        <xs:var_mloh_cust_phone_number xmlns:xs="OrderHeaderUpsert">$20</xs:var_mloh_cust_phone_number>
                                        <xs:var_mloh_account_name xmlns:xs="OrderHeaderUpsert">$21</xs:var_mloh_account_name>
                                        <xs:var_mloh_department_name xmlns:xs="OrderHeaderUpsert">$22</xs:var_mloh_department_name>
                                        <xs:var_mloh_city xmlns:xs="OrderHeaderUpsert">$23</xs:var_mloh_city>
                                        <xs:var_mloh_zip_code xmlns:xs="OrderHeaderUpsert">$24</xs:var_mloh_zip_code>
                                        <xs:var_mloh_state xmlns:xs="OrderHeaderUpsert">$25</xs:var_mloh_state>
                                        <xs:var_mloh_country_code xmlns:xs="OrderHeaderUpsert">$26</xs:var_mloh_country_code>
                                        <xs:var_mloh_first_name xmlns:xs="OrderHeaderUpsert">$27</xs:var_mloh_first_name>
                                        <xs:var_mloh_last_name xmlns:xs="OrderHeaderUpsert">$28</xs:var_mloh_last_name>
                                        <!--Added Line No(140) to accomodate School ID apart from Department id Update Date 25/04/2019-->
                                        <xs:var_mloh_school_secid_onyx xmlns:xs="OrderHeaderUpsert">$29</xs:var_mloh_school_secid_onyx>
                                    </body>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToAddress1']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToAddress2']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToAddress3']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToAddress4']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToAddress5']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'emailTo']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipViaId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="$ctx:orderDate" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'sampleSourceId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'comment1']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'contactSfId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'departmentSfId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'contactSecondaryId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'legacySecondaryId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'departmentSecondaryId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'departmentCAcct']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'salesRepName']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'salesRepPhone']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'salesRepEmail']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'customerPhone']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'institute']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'department']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToCity']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToPostCode']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToState']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'shipToCountry']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'firstName']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'lastName']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <arg evaluator="xml" expression="//*[local-name() = 'schoolSecondaryId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                </args>
                            </payloadFactory>
                            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            <property name="progress" scope="default" type="STRING" value="Upserting to DSS for OrderHeader"/>
                            <log>
                                <property expression="$ctx:feature" name="Feature"/>
                                <property expression="$ctx:sequenceName" name="SequenceName"/>
                                <property expression="$ctx:progress" name="Progress"/>
                                <property expression="$ctx:secondaryId" name="orderSecId"/>
                            </log>
                            <call>
                                <endpoint>
                                    <address format="soap11" uri="local:///services/DssOrderLineUpsert/DssOrderLineUpsert"/>
                                </endpoint>
                            </call>
                            <!--/sequence>
                        </target>
                     </iterate><-->
                            <property expression="//*[local-name() = 'var_order_service_identity_Header']/text()" name="mySQLId" scope="default" type="STRING"/>
                            <property expression="fn:concat('000000000',get-property('mySQLId'))" name="mySQLId" scope="default" type="STRING"/>
                            <script language="js"><![CDATA[var secondary_id = mc.getProperty('mySQLId');
                               secondary_id = secondary_id.slice(-10);
                               mc.setProperty('mySQLId', secondary_id.toString());]]></script>
                            <property expression="//*[local-name() = 'var_order_service_identity_Header']/text()" name="dssResponse" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
                            <!--Dummy the onyx response for now, need to try to remove from salesforce side that it requires this, but will take more time-->
                            <filter xpath="boolean(get-property('dssResponse'))">
                                <then>
                                    <payloadFactory media-type="xml">
                                        <format>
                                            <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                                <soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                                                    <ExecuteResponse xmlns="http://www.onyx.com/OEAS/WebService">
                                                        <ExecuteResult>&lt;returnXml&gt;&lt;otmId&gt;$1&lt;/otmId&gt;&lt;context&gt;&lt;sessionSecondsRemaining&gt;14400&lt;/sessionSecondsRemaining&gt;&lt;/context&gt;&lt;methodStatus&gt;&lt;statusType&gt;success&lt;/statusType&gt;&lt;/methodStatus&gt;&lt;parametersReturn&gt;&lt;literatureOrders&gt;&lt;literatureOrder action="insert" objectType="literatureOrder" content="keysOnly"&gt;&lt;primaryId&gt;DSS-$1&lt;/primaryId&gt;&lt;literatureOrderLines objectType="literatureOrderLine" collection="1"&gt;&lt;/literatureOrderLines&gt;&lt;/literatureOrder&gt;&lt;/literatureOrders&gt;&lt;/parametersReturn&gt;&lt;customData/&gt;&lt;/returnXml&gt;</ExecuteResult>
                                                    </ExecuteResponse>
                                                </soapenv:Body>
                                            </soap:Envelope>
                                        </format>
                                        <args>
                                            <arg evaluator="xml" expression="$ctx:mySQLId"/>
                                        </args>
                                    </payloadFactory>
                                    <property name="progress" scope="default" type="STRING" value="Upsert to DSS for OrderHeader succeeded, returning success to SF"/>
                                    <log>
                                        <property expression="$ctx:feature" name="Feature"/>
                                        <property expression="$ctx:sequenceName" name="SequenceName"/>
                                        <property expression="$ctx:progress" name="Progress"/>
                                        <property expression="$ctx:secondaryId" name="orderSecId"/>
                                        <property expression="$ctx:mySQLId" name="orderDSSId"/>
                                    </log>
                                </then>
                                <else>
                                    <payloadFactory media-type="xml">
                                        <format>
                                            <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                                <soap:Body>
                                                    <ExecuteResponse xmlns="http://www.onyx.com/OEAS/WebService">
                                                        <ExecuteResult>&lt;returnXml&gt;&lt;otmId&gt;$1&lt;/otmId&gt;&lt;context&gt;&lt;sessionSecondsRemaining&gt;14400&lt;/sessionSecondsRemaining&gt;&lt;/context&gt;&lt;methodStatus&gt;&lt;statusType&gt;failure&lt;/statusType&gt;&lt;error&gt;&lt;errorDescription&gt;Failed to save to DSS&lt;/errorDescription&gt;&lt;errorNumber&gt;-2147220886&lt;/errorNumber&gt;&lt;timestamp&gt;2017-10-18 09:17:42&lt;/timestamp&gt;&lt;/error&gt;&lt;/methodStatus&gt;&lt;parametersReturn&gt;&lt;/parametersReturn&gt;&lt;customData/&gt;&lt;/returnXml&gt;</ExecuteResult>
                                                    </ExecuteResponse>
                                                </soap:Body>
                                            </soap:Envelope>
                                        </format>
                                        <args>
                                            <arg evaluator="xml" expression="$ctx:MessageIDTest"/>
                                        </args>
                                    </payloadFactory>
                                </else>
                            </filter>
                            <property name="messageType" scope="axis2" type="STRING" value="text/xml"/>
                            <property name="progress" scope="default" type="STRING" value="Upsert to DSS for OrderHeader failed, returning failure to SF"/>
                            <log>
                                <property expression="$ctx:feature" name="Feature"/>
                                <property expression="$ctx:sequenceName" name="SequenceName"/>
                                <property expression="$ctx:progress" name="Progress"/>
                                <property expression="$ctx:secondaryId" name="orderSecId"/>
                            </log>
                            <respond/>
                        </then>
                        <else>
                            <property name="progress" scope="default" type="STRING" value="Calling LiteratureOrder object, method other than saveCollection. Should never hit after deco, exiting out"/>
                            <log>
                                <property expression="$ctx:feature" name="Feature"/>
                                <property expression="$ctx:sequenceName" name="SequenceName"/>
                                <property expression="$ctx:progress" name="Progress"/>
                                <property expression="$ctx:secondaryId" name="orderSecId"/>
                            </log>
                            <payloadFactory media-type="xml">
                                <format>
                                    <error>Calling LiteratureOrder object, method other than saveCollection. Should never hit after deco</error>
                                </format>
                                <args/>
                            </payloadFactory>
                            <respond/>
                            <!--send>
                        <endpoint key="OnyxExecute"/>
                     </send>-->
                        </else>
                    </filter>
                </case>
                <case regex="literatureOrderLine">
                    <filter regex="saveCollection" source="$ctx:logicalMethodName">
                        <then>
                            <payloadFactory media-type="xml">
                                <format>
                                    <test>$1</test>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="//*[local-name() = 'ParamXML']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                </args>
                            </payloadFactory>
                            <payloadFactory media-type="xml">
                                <format>
                                    <test>$1</test>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="//*[local-name() = 'literatureOrderLines']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                </args>
                            </payloadFactory>
                            <log>
                                <property name="log" value="++++inside literatureOrderLine switch condition++++"/>
                            </log>
                            <!--iterate expression="//*[local-name() = 'literatureOrderLine']">
                        <target>
                           <sequence><-->
                            <foreach expression="//*[local-name() = 'literatureOrderLine']" id="foreachOrderLine">
                                <sequence>
                                    <log>
                                        <property name="log" value="++++Inside Foreach OrderLine"/>
                                    </log>
                                    <payloadFactory media-type="xml">
                                        <format>
                                            <test>$1</test>
                                        </format>
                                        <args>
                                            <arg evaluator="xml" expression="//*[local-name() = 'literatureOrderLine']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                        </args>
                                    </payloadFactory>
                                    <property expression="//*[local-name() = 'legacySecondaryId']" name="secondaryId" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
                                    <property expression="//*[local-name() = 'comment2']" name="comment2" scope="default" type="STRING"/>
                                    <property expression="fn:concat(get-property('sfids'),',',get-property('comment2'))" name="sfids" scope="default" type="STRING"/>
                                    <log>
                                        <property expression="get-property('sfids')" name="sfid"/>
                                    </log>
                                    <payloadFactory media-type="xml">
                                        <format>
                                            <p:OrderLineUpsert xmlns:p="OrderLineUpsert">
                                                <xs:var_mlol_sf_order_line_id xmlns:xs="OrderLineUpsert">$2</xs:var_mlol_sf_order_line_id>
                                                <xs:var_mlol_quantity xmlns:xs="OrderLineUpsert">$3</xs:var_mlol_quantity>
                                                <xs:var_mlol_owner_id_onyx_guid xmlns:xs="OrderLineUpsert">$1</xs:var_mlol_owner_id_onyx_guid>
                                                <xs:var_mlol_line_status xmlns:xs="OrderLineUpsert">$4</xs:var_mlol_line_status>
                                                <xs:var_mlol_line_status_desc xmlns:xs="OrderLineUpsert">NEED TO ADD DESC</xs:var_mlol_line_status_desc>
                                                <xs:var_mlol_immediate_priority xmlns:xs="OrderLineUpsert">$5</xs:var_mlol_immediate_priority>
                                                <xs:var_mlol_fulfillment_type_code xmlns:xs="OrderLineUpsert">$6</xs:var_mlol_fulfillment_type_code>
                                                <xs:var_mlol_fulfillment_type_name xmlns:xs="OrderLineUpsert"/>
                                                <xs:var_mlol_unit_price xmlns:xs="OrderLineUpsert">$7</xs:var_mlol_unit_price>
                                                <xs:var_mlol_sf_order_header_id xmlns:xs="OrderLineUpsert">$8</xs:var_mlol_sf_order_header_id>
                                                <xs:var_mlol_isbn_10 xmlns:xs="OrderLineUpsert">$9</xs:var_mlol_isbn_10>
                                                <xs:var_mlol_approval_status xmlns:xs="OrderLineUpsert">$10</xs:var_mlol_approval_status>
                                                <xs:var_mlol_order_line_secid_onyx xmlns:xs="OrderLineUpsert">$11</xs:var_mlol_order_line_secid_onyx>
                                                <xs:var_mlol_is_digital xmlns:xs="OrderLineUpsert">$12</xs:var_mlol_is_digital>
                                                <xs:var_mlol_shipping_method xmlns:xs="OrderLineUpsert">$13</xs:var_mlol_shipping_method>
                                                <xs:var_mlol_pub_date xmlns:xs="OrderLineUpsert">$14</xs:var_mlol_pub_date>
                                                <xs:var_mlol_seasonal_pub_start_date xmlns:xs="OrderLineUpsert">$15</xs:var_mlol_seasonal_pub_start_date>
                                                <xs:var_mlol_seasonal_pub_end_date xmlns:xs="OrderLineUpsert">$16</xs:var_mlol_seasonal_pub_end_date>
                                                <xs:var_mlol_future_ship_date xmlns:xs="OrderLineUpsert">$17</xs:var_mlol_future_ship_date>
                                            </p:OrderLineUpsert>
                                        </format>
                                        <args>
                                            <arg evaluator="xml" expression="//*[local-name() = 'ownerId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'comment2']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'quantity']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'lineStatusId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'immediatePriority']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'fulfillmentTypeCode']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'unitPrice']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'orderSfId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'productNumber']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'approvalStatus']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'legacySecondaryId']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'isDigital']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'shippingMethod']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'pubDate']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'seasonalPubStartDate']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'seasonalPubEndDate']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                            <arg evaluator="xml" expression="//*[local-name() = 'futureShipDate']" xmlns:ns="http://org.apache.synapse/xsd"/>
                                        </args>
                                    </payloadFactory>
                                    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                                    <property name="progress" scope="default" type="STRING" value="Upserting to DSS for orderLine"/>
                                    <log>
                                        <property expression="$ctx:feature" name="Feature"/>
                                        <property expression="$ctx:sequenceName" name="SequenceName"/>
                                        <property expression="$ctx:progress" name="Progress"/>
                                        <property expression="$ctx:secondaryId" name="orderLineSecId"/>
                                        <property expression="$ctx:sfids" name="sfids"/>
                                    </log>
                                    <enrich>
                                        <source clone="true" type="body"/>
                                        <target property="test2" type="property"/>
                                    </enrich>
                                    <enrich>
                                        <source clone="true" property="test2" type="property"/>
                                        <target action="child" xpath="$ctx:test"/>
                                    </enrich>
                                </sequence>
                            </foreach>
                            <property expression="fn:string-length(get-property('sfids'))" name="length" scope="default" type="STRING"/>
                            <property expression="fn:substring(get-property('sfids'),2,$ctx:length)" name="sfids" scope="default" type="STRING"/>
                            <log>
                                <property expression="get-property('sfids')" name="sfids"/>
                            </log>
                            <enrich>
                                <source clone="true" property="test" type="property"/>
                                <target type="body"/>
                            </enrich>
                            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                            <log level="full"/>
                            <call>
                                <endpoint>
                                    <address format="soap11" uri="local:///services/DssOrderLineUpsert/DssOrderLineUpsert"/>
                                </endpoint>
                            </call>
                            <log>
                                <property name="log" value="+++++returned from endpoint DssOrderLineUpsert"/>
                            </log>
                            <payloadFactory media-type="xml">
                                <format>
                                    <p:DssMLOrderLineIdRetrieve xmlns:p="mlOrderLineIdRetrieve">
                                        <xs:var_mlol_sfids xmlns:xs="mlOrderLineIdRetrieve">$1</xs:var_mlol_sfids>
                                    </p:DssMLOrderLineIdRetrieve>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="get-property('sfids')"/>
                                </args>
                            </payloadFactory>
                            <log level="full"/>
                            <call>
                                <endpoint>
                                    <address format="soap11" uri="local:///services/DssMLOrderLineIdRetrieve/DssMLOrderLineIdRetrieve"/>
                                </endpoint>
                            </call>
                            <!--/sequence>
                        </target>
                     </iterate><-->
                            <property expression="//*[local-name() = 'var_order_service_identity_line']/text()" name="mySQLId" scope="default" type="STRING"/>
                            <property expression="fn:concat('000000000',get-property('mySQLId'))" name="mySQLId" scope="default" type="STRING"/>
                            <script language="js"><![CDATA[var secondary_id = mc.getProperty('mySQLId');
                       secondary_id = secondary_id.slice(-10);
                       mc.setProperty('mySQLId', secondary_id.toString());]]></script>
                            <property expression="//*[local-name() = 'var_order_service_identity_line']/text()" name="dssResponse" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
                            <!--Dummy the onyx response for now, need to try to remove from salesforce side that it requires this, but will take more time-->
                            <filter xpath="boolean(get-property('dssResponse'))">
                                <then>
                                    <log>
                                        <property name="log" value="+++inside then condition of dssResponse"/>
                                    </log>
                                    <foreach expression="//*[local-name()='Reference']" id="foreachDssResponseOrderLine">
                                        <sequence>
                                            <payloadFactory media-type="xml">
                                                <format>
                                                    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                                        <soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                                                            <ExecuteResponse xmlns="http://www.onyx.com/OEAS/WebService">
                                                                <ExecuteResult>&lt;returnXml&gt;&lt;otmId&gt;$1&lt;/otmId&gt;&lt;context&gt;&lt;sessionSecondsRemaining&gt;14400&lt;/sessionSecondsRemaining&gt;&lt;/context&gt;&lt;methodStatus&gt;&lt;statusType&gt;success&lt;/statusType&gt;&lt;/methodStatus&gt;&lt;parametersReturn&gt;&lt;literatureOrderLines objectType="literatureOrderLine" content="keysOnly"&gt;&lt;literatureOrderLine action="insert" content="keysOnly"&gt;&lt;primaryId&gt;DSS-$1&lt;/primaryId&gt;&lt;/literatureOrderLine&gt;&lt;/literatureOrderLines&gt;&lt;/parametersReturn&gt;&lt;customData/&gt;&lt;/returnXml&gt;</ExecuteResult>
                                                            </ExecuteResponse>
                                                        </soapenv:Body>
                                                    </soap:Envelope>
                                                </format>
                                                <args>
                                                    <arg evaluator="xml" expression="$ctx:mySQLId"/>
                                                </args>
                                            </payloadFactory>
                                            <property name="progress" scope="default" type="STRING" value="Upsert to DSS for OrderLine succeeded, returning success to SF"/>
                                            <log>
                                                <property expression="$ctx:feature" name="Feature"/>
                                                <property expression="$ctx:sequenceName" name="SequenceName"/>
                                                <property expression="$ctx:progress" name="Progress"/>
                                                <property expression="$ctx:secondaryId" name="orderLineSecId"/>
                                                <property expression="$ctx:mySQLId" name="orderLineDSSId"/>
                                            </log>
                                        </sequence>
                                    </foreach>
                                    <log>
                                        <property expression="get-property('logicalMethodName')" name="logicalMethodName"/>
                                    </log>
                                </then>
                                <else>
                                    <payloadFactory media-type="xml">
                                        <format>
                                            <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                                <soap:Body>
                                                    <ExecuteResponse xmlns="http://www.onyx.com/OEAS/WebService">
                                                        <ExecuteResult>&lt;returnXml&gt;&lt;otmId&gt;$1&lt;/otmId&gt;&lt;context&gt;&lt;sessionSecondsRemaining&gt;14400&lt;/sessionSecondsRemaining&gt;&lt;/context&gt;&lt;methodStatus&gt;&lt;statusType&gt;failure&lt;/statusType&gt;&lt;error&gt;&lt;errorDescription&gt;Failed to save to DSS&lt;/errorDescription&gt;&lt;errorNumber&gt;-2147220886&lt;/errorNumber&gt;&lt;timestamp&gt;2017-10-18 09:17:42&lt;/timestamp&gt;&lt;/error&gt;&lt;/methodStatus&gt;&lt;parametersReturn&gt;&lt;/parametersReturn&gt;&lt;customData/&gt;&lt;/returnXml&gt;</ExecuteResult>
                                                    </ExecuteResponse>
                                                </soap:Body>
                                            </soap:Envelope>
                                        </format>
                                        <args>
                                            <arg evaluator="xml" expression="$ctx:MessageIDTest"/>
                                        </args>
                                    </payloadFactory>
                                </else>
                            </filter>
                            <property name="messageType" scope="axis2" type="STRING" value="text/xml"/>
                            <property expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" name="MessageIDResponse" scope="default" type="STRING"/>
                            <property name="progress" scope="default" type="STRING" value="Upsert to DSS for OrderLine failed, returning failure to SF"/>
                            <log>
                                <property expression="$ctx:feature" name="Feature"/>
                                <property expression="$ctx:sequenceName" name="SequenceName"/>
                                <property expression="$ctx:progress" name="Progress"/>
                                <property expression="$ctx:secondaryId" name="orderLineSecId"/>
                            </log>
                            <respond/>
                        </then>
                        <else>
                            <property name="progress" scope="default" type="STRING" value="Calling literatureOrderLine object, method other than saveCollection. Should never hit after deco, exiting out"/>
                            <log>
                                <property expression="$ctx:feature" name="Feature"/>
                                <property expression="$ctx:sequenceName" name="SequenceName"/>
                                <property expression="$ctx:progress" name="Progress"/>
                                <property expression="$ctx:secondaryId" name="orderLineSecId"/>
                            </log>
                            <!--send>
                        <endpoint key="OnyxExecute"/>
                     </send>-->
                            <payloadFactory media-type="xml">
                                <format>
                                    <error>Calling literatureOrderLine object, method other than saveCollection. Should never hit after deco</error>
                                </format>
                                <args/>
                            </payloadFactory>
                            <respond/>
                        </else>
                    </filter>
                </case>
                <default>
                    <property name="progress" scope="default" type="STRING" value="Calling an object other than LiteratureOrder or LiteratureOrderLine. Should never hit after deco, exiting out"/>
                    <log>
                        <property expression="$ctx:feature" name="Feature"/>
                        <property expression="$ctx:sequenceName" name="SequenceName"/>
                        <property expression="$ctx:progress" name="Progress"/>
                    </log>
                    <!--send>
                  <endpoint key="OnyxExecute"/>
               </send>-->
                    <payloadFactory media-type="xml">
                        <format>
                            <error>Calling an object other than LiteratureOrder or LiteratureOrderLine. Should never hit after deco</error>
                        </format>
                        <args/>
                    </payloadFactory>
                    <respond/>
                </default>
            </switch>
        </inSequence>
        <outSequence>
            <send/>
        </outSequence>
        <faultSequence/>
    </target>
</proxy>
